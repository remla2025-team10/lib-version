name: Release lib-ml

on:
  push:
    branches:
      - main
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'release'
    paths:
      - 'VERSION'
      - 'pyproject.toml'
      - 'src/**'
      - '.github/workflows/release.yml'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Python Setup
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip build

      - name: Determine version
        id: versioning
        run: |
          VERSION_FILE="src/lib_version/VERSION"
          CURRENT_VERSION=$(cat $VERSION_FILE)

          # Check if triggered by tag
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            NEW_VERSION="${GITHUB_REF#refs/tags/v}"
          else
            # Strip "-pre" from stored version if it exists
            NEW_VERSION="${CURRENT_VERSION%-pre}"
          fi
          # Update VERSION file to reflect new stable release
          echo "$NEW_VERSION" > $VERSION_FILE

          # Store new version as environment var to use later
          echo "version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Build distribution
        run: |
          python -m build
      
      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ env.version }}
          tag_name: v${{ env.version }}
          files: |
            dist/*.tar.gz
            dist/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Update main to prerelease with incremented patch
        run: |
          IFS='.' read -r major minor patch <<< "${{ env.version }}"
          PATCH=$((patch + 1))
          NEW_VERSION="v${major}.${minor}.${PATCH}-pre"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add src/lib_version/VERSION
          git commit -m "ci: bump version to $NEW_VERSION"
          git tag "$NEW_VERSION"
          git push origin "$NEW_VERSION"