name: Code Quality & Tests

on:
  push:
    branches: ['*']
    tags: ['*']
  pull_request:
    branches: ['main']

permissions:
  contents: write

jobs:
  versioning: # Determine the new version
    if: github.ref == 'refs/tags/release' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    env:
      VERSION_FILE: "src/lib_version/VERSION"
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install build tools
        run: python -m pip install --upgrade pip build

      - name: Build package
        run: python -m build

      - name: Determine new stable version
        id: version
        run: |
          if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
            # Use the tag directly
            NEW_VERSION="${GITHUB_REF#refs/tags/v}"
            echo "Using pushed version tag: $NEW_VERSION"
          else
            # Bump patch version from latest stable vX.Y.Z tag
            LATEST_TAG=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
            if [[ -z "$LATEST_TAG" ]]; then
              echo "No existing version tag found, defaulting to v0.0.1"
              NEW_VERSION="v0.0.1"
            else
              IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST_TAG#v}"
              PATCH=$((PATCH + 1))
              NEW_VERSION="$MAJOR.$MINOR.$PATCH"
              echo "Bumped version: $LATEST_TAG -> $NEW_VERSION"
            fi
          fi

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

       # Remove the pushed tags
      - name: Remove tags
        run: |
          git checkout -b main
          if [[ "$GITHUB_REF" == "refs/tags/release" ]]; then
            git tag -d release
            git push origin :release
          else
            git tag -d v${{ steps.version.outputs.version }}
            git push origin :v${{ steps.version.outputs.version }}
          fi

      - name: Update version file
        run: |
          echo ${{ steps.version.outputs.version }} > $VERSION_FILE
      
      - name: Commit updated version file
        run: |
          git add $VERSION_FILE
          git commit -m "chore: release version v${{ steps.version.outputs.version }}"
          git push origin main
          git tag v${{ steps.version.outputs.version }}
          git push origin v${{ steps.version.outputs.version }}

      - name: Create GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          artifacts: "dist/*.tar.gz, dist/*.whl"
          allowUpdates: true

      - name: Bump patch and add pre tag
        id: prerelease
        run: |
          IFS='.' read -r MAJOR MINOR PATCH <<< "${{ steps.version.outputs.version }}"
          PATCH=$((PATCH + 1))
          PRE_VERSION="v$MAJOR.$MINOR.$PATCH-pre"

          git checkout main
          git pull origin main

          echo "Creating empty commit for $PRE_VERSION"
          git commit --allow-empty -m "chore: bump version to $PRE_VERSION"
          git tag "$PRE_VERSION"

          git push origin main
          git push origin "$PRE_VERSION"